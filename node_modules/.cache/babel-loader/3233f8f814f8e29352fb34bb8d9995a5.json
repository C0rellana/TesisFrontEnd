{"ast":null,"code":"import _slicedToArray from \"/home/carlos/Escritorio/PROYECTO/FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/carlos/Escritorio/PROYECTO/FrontEnd/src/views/UploadFile.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nvar thumbsContainer = {\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  marginTop: 16\n};\nvar thumb = {\n  display: 'inline-flex',\n  borderRadius: 2,\n  border: '1px solid #eaeaea',\n  marginBottom: 8,\n  marginRight: 8,\n  width: 100,\n  height: 100,\n  padding: 4,\n  boxSizing: 'border-box'\n};\nvar thumbInner = {\n  display: 'flex',\n  minWidth: 0,\n  overflow: 'hidden'\n};\nvar img = {\n  display: 'block',\n  width: 'auto',\n  height: '100%'\n};\n\nfunction Previews(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      files = _useState2[0],\n      setFiles = _useState2[1];\n\n  var _useDropzone = useDropzone({\n    accept: 'image/*',\n    onDrop: function onDrop(acceptedFiles) {\n      setFiles(acceptedFiles.map(function (file) {\n        return Object.assign(file, {\n          preview: URL.createObjectURL(file)\n        });\n      }));\n    }\n  }),\n      getRootProps = _useDropzone.getRootProps,\n      getInputProps = _useDropzone.getInputProps;\n\n  var thumbs = files.map(function (file) {\n    return React.createElement(\"div\", {\n      style: thumb,\n      key: file.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: thumbInner,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: file.preview,\n      style: img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })));\n  });\n  useEffect(function () {\n    return function () {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach(function (file) {\n        return URL.revokeObjectURL(file.preview);\n      });\n    };\n  }, [files]);\n  return React.createElement(\"section\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"div\", Object.assign({}, getRootProps({\n    className: 'dropzone'\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Drag 'n' drop some files here, or click to select files\")), React.createElement(\"aside\", {\n    style: thumbsContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, thumbs));\n}\n\nexport default Previews;","map":{"version":3,"sources":["/home/carlos/Escritorio/PROYECTO/FrontEnd/src/views/UploadFile.jsx"],"names":["React","useEffect","useState","useDropzone","thumbsContainer","display","flexDirection","flexWrap","marginTop","thumb","borderRadius","border","marginBottom","marginRight","width","height","padding","boxSizing","thumbInner","minWidth","overflow","img","Previews","props","files","setFiles","accept","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","getRootProps","getInputProps","thumbs","name","forEach","revokeObjectURL","className"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AAEA,IAAMC,eAAe,GAAG;AACtBC,EAAAA,OAAO,EAAE,MADa;AAEtBC,EAAAA,aAAa,EAAE,KAFO;AAGtBC,EAAAA,QAAQ,EAAE,MAHY;AAItBC,EAAAA,SAAS,EAAE;AAJW,CAAxB;AAOA,IAAMC,KAAK,GAAG;AACZJ,EAAAA,OAAO,EAAE,aADG;AAEZK,EAAAA,YAAY,EAAE,CAFF;AAGZC,EAAAA,MAAM,EAAE,mBAHI;AAIZC,EAAAA,YAAY,EAAE,CAJF;AAKZC,EAAAA,WAAW,EAAE,CALD;AAMZC,EAAAA,KAAK,EAAE,GANK;AAOZC,EAAAA,MAAM,EAAE,GAPI;AAQZC,EAAAA,OAAO,EAAE,CARG;AASZC,EAAAA,SAAS,EAAE;AATC,CAAd;AAYA,IAAMC,UAAU,GAAG;AACjBb,EAAAA,OAAO,EAAE,MADQ;AAEjBc,EAAAA,QAAQ,EAAE,CAFO;AAGjBC,EAAAA,QAAQ,EAAE;AAHO,CAAnB;AAMA,IAAMC,GAAG,GAAG;AACVhB,EAAAA,OAAO,EAAE,OADC;AAEVS,EAAAA,KAAK,EAAE,MAFG;AAGVC,EAAAA,MAAM,EAAE;AAHE,CAAZ;;AAOA,SAASO,QAAT,CAAkBC,KAAlB,EAAyB;AAAA,kBACGrB,QAAQ,CAAC,EAAD,CADX;AAAA;AAAA,MAChBsB,KADgB;AAAA,MACTC,QADS;;AAAA,qBAEetB,WAAW,CAAC;AAChDuB,IAAAA,MAAM,EAAE,SADwC;AAEhDC,IAAAA,MAAM,EAAE,gBAAAC,aAAa,EAAI;AACvBH,MAAAA,QAAQ,CAACG,aAAa,CAACC,GAAd,CAAkB,UAAAC,IAAI;AAAA,eAAIC,MAAM,CAACC,MAAP,CAAcF,IAAd,EAAoB;AACrDG,UAAAA,OAAO,EAAEC,GAAG,CAACC,eAAJ,CAAoBL,IAApB;AAD4C,SAApB,CAAJ;AAAA,OAAtB,CAAD,CAAR;AAGD;AAN+C,GAAD,CAF1B;AAAA,MAEhBM,YAFgB,gBAEhBA,YAFgB;AAAA,MAEFC,aAFE,gBAEFA,aAFE;;AAWvB,MAAMC,MAAM,GAAGd,KAAK,CAACK,GAAN,CAAU,UAAAC,IAAI;AAAA,WAC3B;AAAK,MAAA,KAAK,EAAErB,KAAZ;AAAmB,MAAA,GAAG,EAAEqB,IAAI,CAACS,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,KAAK,EAAErB,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,GAAG,EAAEY,IAAI,CAACG,OADZ;AAEE,MAAA,KAAK,EAAEZ,GAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CAD2B;AAAA,GAAd,CAAf;AAWApB,EAAAA,SAAS,CAAC;AAAA,WAAM,YAAM;AACpB;AACAuB,MAAAA,KAAK,CAACgB,OAAN,CAAc,UAAAV,IAAI;AAAA,eAAII,GAAG,CAACO,eAAJ,CAAoBX,IAAI,CAACG,OAAzB,CAAJ;AAAA,OAAlB;AACD,KAHS;AAAA,GAAD,EAGN,CAACT,KAAD,CAHM,CAAT;AAKA,SACE;AAAS,IAAA,SAAS,EAAC,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6CAASY,YAAY,CAAC;AAACM,IAAAA,SAAS,EAAE;AAAZ,GAAD,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,+CAAWL,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAFF,CADF,EAKE;AAAO,IAAA,KAAK,EAAEjC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGkC,MADH,CALF,CADF;AAWD;;AAID,eAAehB,QAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useDropzone} from 'react-dropzone';\n\nconst thumbsContainer = {\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  marginTop: 16\n};\n\nconst thumb = {\n  display: 'inline-flex',\n  borderRadius: 2,\n  border: '1px solid #eaeaea',\n  marginBottom: 8,\n  marginRight: 8,\n  width: 100,\n  height: 100,\n  padding: 4,\n  boxSizing: 'border-box'\n};\n\nconst thumbInner = {\n  display: 'flex',\n  minWidth: 0,\n  overflow: 'hidden'\n};\n\nconst img = {\n  display: 'block',\n  width: 'auto',\n  height: '100%'\n};\n\n\nfunction Previews(props) {\n  const [files, setFiles] = useState([]);\n  const {getRootProps, getInputProps} = useDropzone({\n    accept: 'image/*',\n    onDrop: acceptedFiles => {\n      setFiles(acceptedFiles.map(file => Object.assign(file, {\n        preview: URL.createObjectURL(file)\n      })));\n    }\n  });\n  \n  const thumbs = files.map(file => (\n    <div style={thumb} key={file.name}>\n      <div style={thumbInner}>\n        <img\n          src={file.preview}\n          style={img}\n        />\n      </div>\n    </div>\n  ));\n\n  useEffect(() => () => {\n    // Make sure to revoke the data uris to avoid memory leaks\n    files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [files]);\n\n  return (\n    <section className=\"container\">\n      <div {...getRootProps({className: 'dropzone'})}>\n        <input {...getInputProps()} />\n        <p>Drag 'n' drop some files here, or click to select files</p>\n      </div>\n      <aside style={thumbsContainer}>\n        {thumbs}\n      </aside>\n    </section>\n  );\n}\n\n\n\nexport default Previews;\n"]},"metadata":{},"sourceType":"module"}